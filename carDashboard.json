[
    {
        "id": "49cefe6d5bf53a7f",
        "type": "tab",
        "label": "Flow 2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "9c71348338c83dbd",
        "type": "inject",
        "z": "49cefe6d5bf53a7f",
        "name": "Fuel Consumpton",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "/car/fuel",
        "x": 210,
        "y": 200,
        "wires": [
            [
                "7a04cee4e940999d"
            ]
        ]
    },
    {
        "id": "10e0d97d1d44d0cb",
        "type": "inject",
        "z": "49cefe6d5bf53a7f",
        "name": "Engine Temperature",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "/car/engineTemp",
        "x": 210,
        "y": 260,
        "wires": [
            [
                "9e394151f669e42e"
            ]
        ]
    },
    {
        "id": "50c44db2e9dc017d",
        "type": "inject",
        "z": "49cefe6d5bf53a7f",
        "name": "Speed",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "/car/speed",
        "x": 170,
        "y": 320,
        "wires": [
            [
                "a49463a2a97048be"
            ]
        ]
    },
    {
        "id": "5ee4c9015697cd9e",
        "type": "inject",
        "z": "49cefe6d5bf53a7f",
        "name": "Cabin Temperature",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "/car/cabinTemp",
        "x": 210,
        "y": 440,
        "wires": [
            [
                "5f9f57a6cf7f98de"
            ]
        ]
    },
    {
        "id": "bca6de33eafafa95",
        "type": "inject",
        "z": "49cefe6d5bf53a7f",
        "name": "Air Quality",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "/car/airQuality",
        "x": 180,
        "y": 500,
        "wires": [
            [
                "3aa6527bfe9d1ba8"
            ]
        ]
    },
    {
        "id": "814e3dba234febcf",
        "type": "inject",
        "z": "49cefe6d5bf53a7f",
        "name": "Tire Pressure",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "/car/Pressure",
        "x": 190,
        "y": 560,
        "wires": [
            [
                "761f54a8f687be1c"
            ]
        ]
    },
    {
        "id": "68626bad371a813d",
        "type": "inject",
        "z": "49cefe6d5bf53a7f",
        "name": "Seat Belt Enagagement",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "/car/seatBelt",
        "x": 220,
        "y": 380,
        "wires": [
            [
                "2b2035fd0a29ccdc"
            ]
        ]
    },
    {
        "id": "7a04cee4e940999d",
        "type": "function",
        "z": "49cefe6d5bf53a7f",
        "name": "Fuel Consumption",
        "func": "// Simulate fuel consumption\nfunction generateFuelConsumption(speed, engineTemperature) {\n// Base fuel consumption as miles per gallon (mpg) or liters per 100km\nlet baseFuelConsumption = 30; // Example base value, assuming 30 mpg\n// Adjust fuel consumption based on speed and engine temperature\n// Typically, fuel consumption increases as speed goes beyond an optimal range\n// or if the engine temperature is too high.\nif (speed > 60) {\nbaseFuelConsumption -= (speed - 60) * 0.2;\n}\nif (engineTemperature > 200) {\nbaseFuelConsumption -= (engineTemperature - 200) * 0.1;\n}\n// Add some randomness to simulate real-world variations\nlet randomVariation = Math.random() * 2; // +/- 1 mpg\nbaseFuelConsumption += (randomVariation - 1);\n// Ensure fuel consumption doesn't go below a threshold\nif (baseFuelConsumption < 10) {\nbaseFuelConsumption = 10; // Minimum fuel consumption\n}\nreturn baseFuelConsumption;\n}\n// Example usage in Node-RED function node \nlet speed = flow.get('speed'); // Extract speed from incoming message payload \nlet engineTemp = flow.get('engineTemp'); // Extract engine temperature from incoming message payload \nlet fuelConsumption = generateFuelConsumption(speed, engineTemp); \n// Create a new message payload with the simulated fuel consumption value \nmsg.payload = { \nfuel: fuelConsumption.toFixed(2),\nspeed:speed,\nengineTemp:engineTemp // Round to 2 decimal places \n}; \nmsg.topic=\"/car/fuel\"\nreturn msg; // Return the message object to pass to the next node",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 300,
        "wires": [
            [
                "14c628216d5ad226"
            ]
        ]
    },
    {
        "id": "9e394151f669e42e",
        "type": "function",
        "z": "49cefe6d5bf53a7f",
        "name": "Engine Temp",
        "func": "// Simulate engine temperature\nlet minTemp = 70; // minimum engine temperature\nlet maxTemp = 220; // maximum engine temperature\n// Generate a random engine temperature between minTemp and maxTemp\nlet engineTemp = Math.floor(Math.random() * (maxTemp - minTemp + 1) + minTemp);\n// Create a JSON object with the value\nvar msgPayload = {\nengineTemp: engineTemp\n};\n\nflow.set('engineTemp',engineTemp)\n// Set the payload to the message object\nmsg.payload = msgPayload;\n// Return the message object to be passed to the next node\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 260,
        "wires": [
            [
                "14c628216d5ad226",
                "7a04cee4e940999d"
            ]
        ]
    },
    {
        "id": "a49463a2a97048be",
        "type": "function",
        "z": "49cefe6d5bf53a7f",
        "name": "Speed",
        "func": "// Function to simulate speed data \nfunction simulateSpeed() {\n    // Define the speed range (in miles per hour or kilometers per hour) \n    const minSpeed = 0; // Min speed of the vehicle at rest \n    const maxSpeed = 120; // Max speed - hypothetical top speed of the vehicle \n    // Randomly decide if the car accelerates or decelerates \n    const change = Math.random() > 0.5 ? 1 : -1;\n    // Random acceleration factor between 1 and 5 \n    const accelerationFactor = Math.floor(Math.random() * 5 + 1);\n    // Retrieve the current speed from the flow context to maintain state \n    let currentSpeed = flow.get('currentSpeed') || 0;\n    // Calculate new speed with random acceleration/deceleration \n    currentSpeed += change * accelerationFactor;\n    // Ensure the speed stays within the min and max range \n    currentSpeed = Math.max(minSpeed, Math.min(maxSpeed, currentSpeed));\n    // Update the flow context with the new speed \n    flow.set('currentSpeed', currentSpeed);\n    return currentSpeed;\n}\n// Call the simulateSpeed function and assign its value to msg.payload \nmsg.payload = {\n    speed: simulateSpeed() // Simulate speed data \n};\nflow.set('speed',msg.payload.speed)\n// Return the message object to pass to the next node \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 320,
        "wires": [
            [
                "14c628216d5ad226",
                "7a04cee4e940999d"
            ]
        ]
    },
    {
        "id": "2b2035fd0a29ccdc",
        "type": "function",
        "z": "49cefe6d5bf53a7f",
        "name": "Seat Belt Function",
        "func": "// Function to simulate seat belt engagement data\nfunction simulateSeatBeltEngagement() {\n    // Define the probability of seatbelt being engaged\n    const probabilityOfEngagement = 0.8; // 80% chance the seatbelt is engaged\n    // Generate a random number between 0 and 1\n    const randomNum = Math.random();\n    // Determine seatbelt status based on the random number and probability\n    const seatBeltEngaged = randomNum < probabilityOfEngagement;\n    return seatBeltEngaged;\n}\n// Call the simulateSeatBeltEngagement function and assign its value to msg.payload\nmsg.payload = {\n    seatBelt: simulateSeatBeltEngagement() ? \"Engaged\" : \"Disengaged\"\n};\n// Return the message object to pass to the next node\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 380,
        "wires": [
            [
                "14c628216d5ad226"
            ]
        ]
    },
    {
        "id": "5f9f57a6cf7f98de",
        "type": "function",
        "z": "49cefe6d5bf53a7f",
        "name": "Cabin Temperature",
        "func": "function simulateCabinTemperature() {\n    // Define the typical temperature range inside a vehicle cabin in degrees Celsius\n    const minTemp = 15; // Minimum cabin temperature\n    const maxTemp = 30; // Maximum cabin temperature\n    // Simulate daily variation based on external factors\n    // For simplicity, we'll use a sine wave to simulate day/night temperature cycles\n    let hours = new Date().getHours();\n    let dailyVariation = Math.sin((hours / 24) * 2 * Math.PI);\n    // Calculate the current cabin temperature within the range, adjusted for daily varia�on\n    let cabinTemperature = minTemp + (maxTemp - minTemp) / 2 + (dailyVariation * (maxTemp - minTemp)\n        / 2);\n    // Add some randomness to simulate minor fluctuations\n    let randomFluctuation = (Math.random() - 0.5) * 2; // +/- 1 degree fluctuation\n    cabinTemperature += randomFluctuation;\n    return cabinTemperature;\n}\n// Call the simulateCabinTemperature function and assign its value to msg.payload\nmsg.payload = {\n    cabinTemp: simulateCabinTemperature().toFixed(2) // Round to 2 decimal places\n};\n// Return the message object to pass to the next node\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 440,
        "wires": [
            [
                "14c628216d5ad226"
            ]
        ]
    },
    {
        "id": "3aa6527bfe9d1ba8",
        "type": "function",
        "z": "49cefe6d5bf53a7f",
        "name": "Air Quality",
        "func": "//Function to simulate air quality data\nfunction simulateAirQuality() {\n    // Define the AQI range\n    const minAQI = 0; // Good air quality\n    const maxAQI = 500; // Hazardous air quality\n    // Generate a random AQI within the range\n    let aqi = Math.floor(Math.random() * (maxAQI - minAQI + 1) + minAQI);\n    return aqi;\n}\n// Call the simulate AirQuality function and assign its value to msg.payload\nmsg.payload = {\n    airQuality: simulateAirQuality() // Simulate air quality data\n};\n// Return the message object to pass to the next node\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 500,
        "wires": [
            [
                "14c628216d5ad226"
            ]
        ]
    },
    {
        "id": "761f54a8f687be1c",
        "type": "function",
        "z": "49cefe6d5bf53a7f",
        "name": "Tire Pressure",
        "func": "// Function to simulate tire pressure data for four tires\nfunction simulateTirePressure() {\n    // Define the normal tire pressure range in psi\n    const minPressure = 30; // Minimum normal pressure\n    const maxPressure = 35; // Maximum normal pressure\n    // Function to generate random pressure for a tire\n    const generatePressure = () => Math.floor(Math.random() * (maxPressure - minPressure + 1) +\n        minPressure);\n// Generate random pressure for each tire\nlet tirePressures = {\n        frontLeft: generatePressure(),\n        frontRight: generatePressure(),\n        rearLeft: generatePressure(),\n        rearRight: generatePressure()\n        \n    };\n    return tirePressures;\n}\n// Call the simulateTirePressure function and assign its value to msg.payload\nmsg.payload = simulateTirePressure(); // Simulate tire pressure data\n// Return the message object to pass to the next node\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 560,
        "wires": [
            [
                "14c628216d5ad226"
            ]
        ]
    },
    {
        "id": "14c628216d5ad226",
        "type": "mqtt out",
        "z": "49cefe6d5bf53a7f",
        "name": "",
        "topic": "",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "51580c18124623f9",
        "x": 750,
        "y": 460,
        "wires": []
    },
    {
        "id": "a9f334f71973a204",
        "type": "inject",
        "z": "49cefe6d5bf53a7f",
        "name": "Door",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "/car/door",
        "x": 170,
        "y": 620,
        "wires": [
            [
                "3e1f0df662b85fea"
            ]
        ]
    },
    {
        "id": "3e1f0df662b85fea",
        "type": "function",
        "z": "49cefe6d5bf53a7f",
        "name": "doorEngage",
        "func": "// Function to simulate Door engagement data\nfunction doorEngagement() {\n    // Define the probability of Door being engaged\n    const probabilityOfEngagement = 0.5; // 80% chance the Door is engaged\n    // Generate a random number between 0 and 1\n    const randomNum = Math.random();\n    // Determine Door status based on the random number and probability\n    const doorEngaged = randomNum < probabilityOfEngagement;\n    return doorEngaged;\n}\n// Call the simulateDoorEngagement function and assign its value to msg.payload\nmsg.payload = {\n    door: doorEngagement() ? \"Open\" : \"Closed\"\n};\n// Return the message object to pass to the next node\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 620,
        "wires": [
            [
                "14c628216d5ad226"
            ]
        ]
    },
    {
        "id": "3407784c3242ba93",
        "type": "mqtt in",
        "z": "49cefe6d5bf53a7f",
        "name": "",
        "topic": "/car/+",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "51580c18124623f9",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 890,
        "y": 460,
        "wires": [
            [
                "849cd1b985126a95"
            ]
        ]
    },
    {
        "id": "57c8acaf499268b9",
        "type": "ui_gauge",
        "z": "49cefe6d5bf53a7f",
        "name": "",
        "group": "4e17be76d7c227f2",
        "order": 3,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Fuel Consumption",
        "label": "units",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "35",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 1530,
        "y": 200,
        "wires": []
    },
    {
        "id": "849cd1b985126a95",
        "type": "switch",
        "z": "49cefe6d5bf53a7f",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "/car/fuel",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "/car/speed",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "/car/seatBelt",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "/car/cabinTemp",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "/car/Pressure",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "/car/airQuality",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "/car/engineTemp",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "/car/door",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "/car/weather",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 9,
        "x": 1030,
        "y": 460,
        "wires": [
            [
                "ef7fb01b7f55a271",
                "c18642df57ff093a"
            ],
            [
                "647f16ed6148f1ca"
            ],
            [
                "b698157e2a766402"
            ],
            [
                "2002be9e1d50fba4"
            ],
            [
                "751ddb8c41cee960"
            ],
            [
                "56e4ed76a33fca37"
            ],
            [
                "9aa686deb60dea19"
            ],
            [
                "926b59f43b7c5038"
            ],
            [
                "ea64e0add4700c8b"
            ]
        ]
    },
    {
        "id": "a6ca4b198ff0c330",
        "type": "ui_gauge",
        "z": "49cefe6d5bf53a7f",
        "name": "",
        "group": "300fe96e30199285",
        "order": 3,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Speed",
        "label": "units",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 1510,
        "y": 400,
        "wires": []
    },
    {
        "id": "12361a78fa5c6bc7",
        "type": "ui_gauge",
        "z": "49cefe6d5bf53a7f",
        "name": "",
        "group": "0f1a4595da1a2a36",
        "order": 4,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Engine Temperature",
        "label": "units",
        "format": "{{value}}",
        "min": 0,
        "max": "250",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 1560,
        "y": 800,
        "wires": []
    },
    {
        "id": "7aa568a8d58d7ed7",
        "type": "ui_gauge",
        "z": "49cefe6d5bf53a7f",
        "name": "",
        "group": "0f1a4595da1a2a36",
        "order": 3,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Cabin Temperature",
        "label": "units",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 1550,
        "y": 620,
        "wires": []
    },
    {
        "id": "b8f4a61aa4216f1a",
        "type": "ui_gauge",
        "z": "49cefe6d5bf53a7f",
        "name": "",
        "group": "b15bfe279c987f08",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Tire Pressure",
        "label": "units",
        "format": "{{value}}",
        "min": "20",
        "max": "40",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 1540,
        "y": 680,
        "wires": []
    },
    {
        "id": "6bc74bd9a3cc915d",
        "type": "ui_gauge",
        "z": "49cefe6d5bf53a7f",
        "name": "",
        "group": "0f1a4595da1a2a36",
        "order": 5,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Air Quality",
        "label": "units",
        "format": "{{value}}",
        "min": 0,
        "max": "500",
        "colors": [
            "#00b500",
            "#e6a800",
            "#ca3838"
        ],
        "seg1": "170",
        "seg2": "340",
        "diff": false,
        "className": "",
        "x": 1530,
        "y": 740,
        "wires": []
    },
    {
        "id": "074dbd8198c67534",
        "type": "ui_chart",
        "z": "49cefe6d5bf53a7f",
        "name": "",
        "group": "4e17be76d7c227f2",
        "order": 4,
        "width": 0,
        "height": 0,
        "label": "chartFuel",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1500,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "f0c06010cb866631",
        "type": "ui_chart",
        "z": "49cefe6d5bf53a7f",
        "name": "",
        "group": "300fe96e30199285",
        "order": 4,
        "width": 0,
        "height": 0,
        "label": "speedChart",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1530,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "ef7fb01b7f55a271",
        "type": "function",
        "z": "49cefe6d5bf53a7f",
        "name": "Fuel Consumption",
        "func": "var lastfuel = context.get('fuel')\n\nvar diff = msg.payload.fuel - lastfuel\n\nlastfuel = msg.payload.fuel\n\n\ncontext.set('fuel', lastfuel)\n\nmsg.payload = msg.payload.fuel\n\nlet msg2 = { payload: diff }\n\nlet msg3={}\n\nif(msg2.payload >1.2)\n{\n    msg3.payload=false\n}\nelse if(msg2.payload<=1.2)\n{\n    msg3.payload=true;\n}\nreturn [msg, msg2,msg3];",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 220,
        "wires": [
            [
                "57c8acaf499268b9",
                "074dbd8198c67534"
            ],
            [
                "33d735f18205448c"
            ],
            [
                "2fbf2f371a3efb4f"
            ]
        ]
    },
    {
        "id": "647f16ed6148f1ca",
        "type": "function",
        "z": "49cefe6d5bf53a7f",
        "name": "Speed",
        "func": "flow.set('speed', msg.payload.speed)\nmsg.payload=msg.payload.speed\n\nlet msg2 ={}\n\nif(msg.payload >25)\n{\n    msg2={payload:false}\n}\nelse if(msg.payload<=25)\n{\n    msg2={payload:true}\n}\n\nreturn [msg,msg2];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 420,
        "wires": [
            [
                "a6ca4b198ff0c330",
                "f0c06010cb866631",
                "b698157e2a766402"
            ],
            [
                "0e452b8a2d2d36ab"
            ]
        ]
    },
    {
        "id": "9aa686deb60dea19",
        "type": "function",
        "z": "49cefe6d5bf53a7f",
        "name": "function 16",
        "func": "let msg1={payload:msg.payload.engineTemp}\nlet msg2={}\nif(msg.payload.engineTemp>190)\n{\n     msg2={payload:false}\n}\nelse if(msg.payload.engineTemp>70 && msg.payload.engineTemp<=190)\n{\n     msg2={payload:true}\n}\nreturn [msg1,msg2];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 820,
        "wires": [
            [
                "12361a78fa5c6bc7"
            ],
            [
                "4c7bd77bdb6c9fa5"
            ]
        ]
    },
    {
        "id": "2002be9e1d50fba4",
        "type": "function",
        "z": "49cefe6d5bf53a7f",
        "name": "function 17",
        "func": "msg.payload=msg.payload.cabinTemp\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 620,
        "wires": [
            [
                "7aa568a8d58d7ed7"
            ]
        ]
    },
    {
        "id": "751ddb8c41cee960",
        "type": "function",
        "z": "49cefe6d5bf53a7f",
        "name": "function 18",
        "func": "let fL= msg.payload.frontLeft;\nlet fR= msg.payload.frontRight;\nlet rL= msg.payload.rearLeft;\nlet rR= msg.payload.rearRight;\n\nmsg.payload=(fL+fR+rL+rR)/4;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 680,
        "wires": [
            [
                "b8f4a61aa4216f1a"
            ]
        ]
    },
    {
        "id": "56e4ed76a33fca37",
        "type": "function",
        "z": "49cefe6d5bf53a7f",
        "name": "function 19",
        "func": "msg.payload=msg.payload.airQuality\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 740,
        "wires": [
            [
                "6bc74bd9a3cc915d"
            ]
        ]
    },
    {
        "id": "b698157e2a766402",
        "type": "function",
        "z": "49cefe6d5bf53a7f",
        "name": "Seat Belt",
        "func": "var speed = flow.get('speed')\nif(msg.payload.seatBelt !=null)\n{\n    if(msg.payload.seatBelt == \"Engaged\")\n        {\n            msg.payload=true\n        }\n    else if (msg.payload.seatBelt == \"Disengaged\")\n        {\n            msg.payload=false;\n        }\n    context.set('seatbeltFlag',msg.payload)\n}\nelse\n{\n    msg.payload = context.get('seatbeltFlag')\n}\nlet msg2={}\n\nif(speed<=2)\n{\n    msg2={payload:true}\n}\nelse if(speed>2 )\n{\n    msg2={payload:msg.payload}\n}\n\nreturn [msg,msg2];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 540,
        "wires": [
            [
                "8799cd1f21fe48d5"
            ],
            [
                "e0183369c4555bbd"
            ]
        ]
    },
    {
        "id": "b99dab9745baaa23",
        "type": "ui_led",
        "z": "49cefe6d5bf53a7f",
        "order": 1,
        "group": "f89131029aaaa906",
        "width": 0,
        "height": 0,
        "label": "Door",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "false",
                "valueType": "bool"
            },
            {
                "color": "#008000",
                "value": "true",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "",
        "x": 1510,
        "y": 900,
        "wires": []
    },
    {
        "id": "926b59f43b7c5038",
        "type": "function",
        "z": "49cefe6d5bf53a7f",
        "name": "function 22",
        "func": "if(msg.payload.door == \"Closed\")\n{\n    msg.payload=true\n}\nelse if (msg.payload.door == \"Open\")\n{\n    msg.payload=false;\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 900,
        "wires": [
            [
                "b99dab9745baaa23"
            ]
        ]
    },
    {
        "id": "8799cd1f21fe48d5",
        "type": "ui_led",
        "z": "49cefe6d5bf53a7f",
        "order": 2,
        "group": "f89131029aaaa906",
        "width": 0,
        "height": 0,
        "label": "Seat Belt",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "false",
                "valueType": "bool"
            },
            {
                "color": "#008000",
                "value": "true",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "",
        "x": 1510,
        "y": 520,
        "wires": []
    },
    {
        "id": "4c7bd77bdb6c9fa5",
        "type": "ui_led",
        "z": "49cefe6d5bf53a7f",
        "order": 2,
        "group": "0f1a4595da1a2a36",
        "width": 0,
        "height": 0,
        "label": "Engine Over Temperature",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "false",
                "valueType": "bool"
            },
            {
                "color": "#008000",
                "value": "true",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "",
        "x": 1510,
        "y": 840,
        "wires": []
    },
    {
        "id": "33d735f18205448c",
        "type": "ui_text",
        "z": "49cefe6d5bf53a7f",
        "group": "4e17be76d7c227f2",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Fuel Rate",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1500,
        "y": 240,
        "wires": []
    },
    {
        "id": "2fbf2f371a3efb4f",
        "type": "ui_led",
        "z": "49cefe6d5bf53a7f",
        "order": 2,
        "group": "4e17be76d7c227f2",
        "width": 0,
        "height": 0,
        "label": "Rapid Fuel",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "false",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "",
        "x": 1490,
        "y": 280,
        "wires": []
    },
    {
        "id": "e0183369c4555bbd",
        "type": "ui_led",
        "z": "49cefe6d5bf53a7f",
        "order": 3,
        "group": "f89131029aaaa906",
        "width": 0,
        "height": 0,
        "label": "Seat Belt Warning",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "false",
                "valueType": "bool"
            },
            {
                "color": "#adadad",
                "value": "true",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "",
        "x": 1510,
        "y": 560,
        "wires": []
    },
    {
        "id": "0e452b8a2d2d36ab",
        "type": "ui_led",
        "z": "49cefe6d5bf53a7f",
        "order": 2,
        "group": "300fe96e30199285",
        "width": 0,
        "height": 0,
        "label": "OverSpeeding",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "false",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "",
        "x": 1510,
        "y": 440,
        "wires": []
    },
    {
        "id": "d1e1f342a12c6493",
        "type": "openweathermap",
        "z": "49cefe6d5bf53a7f",
        "name": "BHAM weather",
        "wtype": "current",
        "lon": "",
        "lat": "",
        "city": "Birmingham",
        "country": "Unites States of America",
        "language": "en",
        "x": 420,
        "y": 680,
        "wires": [
            [
                "14c628216d5ad226"
            ]
        ]
    },
    {
        "id": "38cff24e0d5ed908",
        "type": "inject",
        "z": "49cefe6d5bf53a7f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "/car/weather",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 680,
        "wires": [
            [
                "d1e1f342a12c6493"
            ]
        ]
    },
    {
        "id": "c18642df57ff093a",
        "type": "function",
        "z": "49cefe6d5bf53a7f",
        "name": "function 23",
        "func": "var m1={payload:parseFloat(msg.payload.fuel)}\nvar m2={payload:msg.payload.speed}\nvar m3={payload:msg.payload.engineTemp}\nm1.topic=\"Fuel\"\nm2.topic = \"Speed\"\nm3.topic = \"EngineTemp\"\n\n\nreturn [m1,m2,m3];",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 300,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "ea64e0add4700c8b",
        "type": "function",
        "z": "49cefe6d5bf53a7f",
        "name": "function 24",
        "func": "let temp={payload:msg.payload.tempc}\nlet humid={payload:msg.payload.humidity}\nlet press={payload:msg.payload.pressure}\nlet wspeed={payload:msg.payload.windspeed}\nlet dir = {payload:msg.payload.winddirection}\nreturn [temp,humid,press,wspeed,dir]",
        "outputs": 5,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 1020,
        "wires": [
            [
                "b3c4069e9385609f"
            ],
            [
                "1871f7506440c76c"
            ],
            [
                "760228cf89dc8c78"
            ],
            [
                "dd35f77ad20a6581"
            ],
            [
                "f861d4214d6b0b37"
            ]
        ]
    },
    {
        "id": "b3c4069e9385609f",
        "type": "ui_gauge",
        "z": "49cefe6d5bf53a7f",
        "name": "",
        "group": "26ce274dd8075992",
        "order": 0,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Temperature",
        "label": "°C",
        "format": "{{value}}",
        "min": 0,
        "max": "60",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 1530,
        "y": 960,
        "wires": []
    },
    {
        "id": "1871f7506440c76c",
        "type": "ui_gauge",
        "z": "49cefe6d5bf53a7f",
        "name": "",
        "group": "26ce274dd8075992",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Humidity",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 1520,
        "y": 1000,
        "wires": []
    },
    {
        "id": "760228cf89dc8c78",
        "type": "ui_gauge",
        "z": "49cefe6d5bf53a7f",
        "name": "",
        "group": "26ce274dd8075992",
        "order": 0,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Pressure",
        "label": "mmHg",
        "format": "{{value}}",
        "min": 0,
        "max": "1500",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 1520,
        "y": 1040,
        "wires": []
    },
    {
        "id": "dd35f77ad20a6581",
        "type": "ui_gauge",
        "z": "49cefe6d5bf53a7f",
        "name": "",
        "group": "11e6bc985d54145c",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Windspeed",
        "label": "MPH",
        "format": "{{value}}",
        "min": 0,
        "max": "20",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 1530,
        "y": 1080,
        "wires": []
    },
    {
        "id": "f861d4214d6b0b37",
        "type": "ui_gauge",
        "z": "49cefe6d5bf53a7f",
        "name": "",
        "group": "11e6bc985d54145c",
        "order": 2,
        "width": 0,
        "height": 0,
        "gtype": "compass",
        "title": "Wind Direction",
        "label": "units",
        "format": "{{value}}",
        "min": 0,
        "max": "360",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 1540,
        "y": 1120,
        "wires": []
    },
    {
        "id": "7d0de7e6c745aa53",
        "type": "ui_spacer",
        "z": "49cefe6d5bf53a7f",
        "name": "spacer",
        "group": "300fe96e30199285",
        "order": 1,
        "width": 6,
        "height": 1
    },
    {
        "id": "9d0e419127ae8180",
        "type": "ui_spacer",
        "z": "49cefe6d5bf53a7f",
        "name": "spacer",
        "group": "0f1a4595da1a2a36",
        "order": 1,
        "width": 6,
        "height": 1
    },
    {
        "id": "51580c18124623f9",
        "type": "mqtt-broker",
        "name": "",
        "broker": "127.0.0.1",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "4e17be76d7c227f2",
        "type": "ui_group",
        "name": "Fuel Info",
        "tab": "232c65fb352ed3b9",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "300fe96e30199285",
        "type": "ui_group",
        "name": "Speed Info",
        "tab": "232c65fb352ed3b9",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "0f1a4595da1a2a36",
        "type": "ui_group",
        "name": "Car Climate",
        "tab": "232c65fb352ed3b9",
        "order": 3,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "b15bfe279c987f08",
        "type": "ui_group",
        "name": "Tire Pressure Monitoring",
        "tab": "232c65fb352ed3b9",
        "order": 5,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "f89131029aaaa906",
        "type": "ui_group",
        "name": "Alarms",
        "tab": "232c65fb352ed3b9",
        "order": 6,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "26ce274dd8075992",
        "type": "ui_group",
        "name": "Group 1",
        "tab": "8c5d8209d28d056f",
        "order": 1,
        "disp": false,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "11e6bc985d54145c",
        "type": "ui_group",
        "name": "Group 2",
        "tab": "8c5d8209d28d056f",
        "order": 2,
        "disp": false,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "232c65fb352ed3b9",
        "type": "ui_tab",
        "name": "Car Info",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "8c5d8209d28d056f",
        "type": "ui_tab",
        "name": "Weather",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    }
]